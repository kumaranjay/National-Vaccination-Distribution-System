/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ProviderAdmin;

import Business.CDCSystem;
import Business.Enterprise.Enterprise;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Danisha
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    private JPanel userProcessContainer;
    private CDCSystem system;
    private UserAccount account;
    private Enterprise enterprise;
    private Organization organization;

    public ManageOrdersJPanel(JPanel userProcessContainer, CDCSystem system, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.enterprise = enterprise;
        this.account = account;
        populate1();
        populate2();
    }

    public void populate1() {
        int rowCount = requestJTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) requestJTable.getModel();
        dtm.setRowCount(0);
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getName().equals(Organization.Type.Admin.getValue())) {
                organization = org;
                for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    if (request.getRequestType().equals("Order")) {
                        OrderRequest orderRequest = (OrderRequest) request;
                        if (orderRequest.getOrderType().equals("Order")) {
                            Object row[] = new Object[4];
                            row[0] = orderRequest;
                            row[1] = orderRequest.getStatus();
                            row[2] = orderRequest.getRequestDate();
                            row[3] = orderRequest.getResolveDate();
                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }

    public void populate2() {
        int rowCount = deliveryRequestJTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) deliveryRequestJTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestType().equals("Order")) {
                OrderRequest orderRequest = (OrderRequest) request;
                if (orderRequest.getOrderType().equals("Delivery")) {
                    Object row[] = new Object[4];
                    row[0] = orderRequest;
                    row[1] = orderRequest.getStatus();
                    row[2] = orderRequest.getRequestDate();
                    row[3] = orderRequest.getResolveDate();
                    dtm.addRow(row);
                }
            }
        }
    }

    public void populateOrder(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem orderItem : order.getOrderItemList()) {
            Object row[] = new Object[2];
            row[0] = orderItem.getVaccine().getVaccineName();
            row[1] = orderItem.getQuantity();
            dtm.addRow(row);
        }
    }

    public void populateOrder2(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) deliveryOrderTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem orderItem : order.getOrderItemList()) {
            Object row[] = new Object[3];
            row[0] = orderItem.getVaccine().getVaccineName();
            row[1] = orderItem.getQuantity();
            row[2] = orderItem.getSalesPrice() * orderItem.getQuantity();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        placeOrderButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        viewOrderButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        deliveryOrderTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        deliveryRequestJTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        viewOrderButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestJTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Status", "Request Date", "Resolve Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 511, 180));

        placeOrderButton.setBackground(new java.awt.Color(255, 204, 204));
        placeOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        placeOrderButton.setText("Place Order");
        placeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderButtonActionPerformed(evt);
            }
        });
        add(placeOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 320, -1, -1));

        refreshButton.setBackground(new java.awt.Color(255, 204, 204));
        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 98, -1));

        viewOrderButton.setBackground(new java.awt.Color(255, 204, 204));
        viewOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewOrderButton.setText("View Order");
        viewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderButtonActionPerformed(evt);
            }
        });
        add(viewOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, 124, -1));

        deliveryOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(deliveryOrderTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 385, 590, 170));

        deliveryRequestJTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deliveryRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Status", "Request Date", "Resolve Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(deliveryRequestJTable);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 100, 600, 180));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(orderTable);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 520, 170));

        viewOrderButton2.setBackground(new java.awt.Color(255, 204, 204));
        viewOrderButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewOrderButton2.setText("View Order");
        viewOrderButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderButton2ActionPerformed(evt);
            }
        });
        add(viewOrderButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 310, 124, -1));

        jLabel1.setText("Order Requests:-");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        jLabel2.setText("Delivery Requests:-");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 70, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Manage Orders");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, -1, -1));

        backButton.setBackground(new java.awt.Color(255, 204, 204));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 98, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void placeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderButtonActionPerformed
        // TODO add your handling code here:
        PlaceOrderJPanel placeOrderJPanel = new PlaceOrderJPanel(userProcessContainer, system, account, enterprise, organization);
        userProcessContainer.add("PlaceOrderJPanel", placeOrderJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_placeOrderButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        populate1();
        populate2();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void viewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            OrderRequest selectedOrder = (OrderRequest) requestJTable.getValueAt(selectedRow, 0);
            Order order = selectedOrder.getOrder();
            populateOrder(order);

        } else if (selectedRow > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_viewOrderButtonActionPerformed

    private void viewOrderButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = deliveryRequestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            OrderRequest selectedOrder = (OrderRequest) deliveryRequestJTable.getValueAt(selectedRow, 0);
            Order order = selectedOrder.getOrder();
            populateOrder2(order);

        } else if (selectedRow > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_viewOrderButton2ActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable deliveryOrderTable;
    private javax.swing.JTable deliveryRequestJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton placeOrderButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable requestJTable;
    private javax.swing.JButton viewOrderButton;
    private javax.swing.JButton viewOrderButton2;
    // End of variables declaration//GEN-END:variables
}
