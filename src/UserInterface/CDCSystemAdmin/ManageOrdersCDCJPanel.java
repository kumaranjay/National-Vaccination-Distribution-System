/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CDCSystemAdmin;

import Business.CDCSystem;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.WorkQueue.OrderRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Danisha
 */
public class ManageOrdersCDCJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrdersCDCJPanel
     */
    private JPanel userProcessContainer;
    private CDCSystem system;
    private boolean button = false;

    public ManageOrdersCDCJPanel(JPanel userProcessContainer, CDCSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateRequests();
    }

    public void populateRequests() {
        DefaultTableModel dtm = (DefaultTableModel) requestJTable.getModel();
        dtm.setRowCount(0);
        String registered;

        for (WorkRequest request : system.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestType().equals("Order")) {
                OrderRequest orderRequest = (OrderRequest) request;
                Object row[] = new Object[5];
                row[0] = orderRequest;
                row[1] = orderRequest.getStatus();
                row[2] = orderRequest.getRequestDate();
                row[3] = orderRequest.getSender();
                row[4] = orderRequest.getSenderEnterprise();
                dtm.addRow(row);
            }
        }
    }

    public void populateOrder(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem orderItem : order.getOrderItemList()) {
            Object row[] = new Object[2];
            row[0] = orderItem.getVaccine().getVaccineName();
            row[1] = orderItem.getQuantity();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        viewOrderButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        approveButton = new javax.swing.JButton();
        rejectButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestJTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Status", "Request Date", "Sender", "Enterpsie Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 970, 134));

        viewOrderButton.setBackground(new java.awt.Color(255, 204, 204));
        viewOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewOrderButton.setText("View Order");
        viewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderButtonActionPerformed(evt);
            }
        });
        add(viewOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 250, 124, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 310, 530, 135));

        backButton.setBackground(new java.awt.Color(255, 204, 204));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 540, 98, -1));

        approveButton.setBackground(new java.awt.Color(255, 204, 204));
        approveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        approveButton.setText("Approve");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButtonActionPerformed(evt);
            }
        });
        add(approveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 490, 98, -1));

        rejectButton.setBackground(new java.awt.Color(255, 204, 204));
        rejectButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rejectButton.setText("Reject");
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectButtonActionPerformed(evt);
            }
        });
        add(rejectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 490, 98, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Manage Order Requests");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 40, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            OrderRequest orderRequest = (OrderRequest) requestJTable.getValueAt(selectedRow, 0);
            Order order = orderRequest.getOrder();
            populateOrder(order);

        } else if (selectedRow > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_viewOrderButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed
        // TODO add your handling code here:
        if (!button) {
            int selectedRow = requestJTable.getSelectedRow();
            int rowc= requestJTable.getSelectedRowCount();
            if (selectedRow >= 0) {
                OrderRequest orderRequest = (OrderRequest)requestJTable.getValueAt(selectedRow, 0);
                if (orderRequest.getStatus().equalsIgnoreCase("Rejected by CDC")) {
                    JOptionPane.showMessageDialog(null, "This order has been rejected already.");
                    return;
                }
                int totalVaccines = 0;
                Network network = null;
                boolean limitExceed = false;
                int limit = 0;
                String state = orderRequest.getSenderEnterprise().getLocation();
                for (Network nw : system.getNetwork().getNetworkList()) {
                    if (nw.getName().equals(state)) {
                        network = nw;
                    }
                }

                int maxVaccine = (int) (network.getPopulation() * 0.05);
                totalVaccines = network.getTotalVaccines();
                for (OrderItem oi : orderRequest.getOrder().getOrderItemList()) {
                    totalVaccines = oi.getQuantity() + totalVaccines;
                }

                if (totalVaccines > maxVaccine) {
                    limit = maxVaccine - network.getTotalVaccines();
                    JOptionPane.showMessageDialog(null, "This state exceeds maximum limit. You can order only  " + limit + " more vaccines. Rejecting the current order.");
                    limitExceed = true;
                }
                if (limitExceed) {
                    orderRequest.setStatus("Rejected by CDC");
                    orderRequest.setMessage("This state exceeds maximum limit. You can order only  " + limit + " more vaccines. Rejecting the current order.");
                    orderRequest.setResolveDate(new Date());

                } else {
                    network.setTotalVaccines(totalVaccines);
                    orderRequest.setStatus("Sent to National Distributor");
                    orderRequest.setResolveDate(new Date());
                    WorkRequest request = orderRequest;
                    system.getNationalDistributor().getWorkQueue().getWorkRequestList().add(request);
                    button = true;
                    JOptionPane.showMessageDialog(null, "Request forwarded to Distributor");
                    populateRequests();
                }
                
            } else if (rowc > 1) {
                JOptionPane.showMessageDialog(null, "Please select only one row");
            } else {
                JOptionPane.showMessageDialog(null, "Please select a row");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Request already processed");
        }
    }//GEN-LAST:event_approveButtonActionPerformed

    private void rejectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectButtonActionPerformed
        // TODO add your handling code here:
        if (!button) {
            int selectedRow = requestJTable.getSelectedRow();
            if (selectedRow >= 0) {
                OrderRequest orderRequest = new OrderRequest();
                WorkRequest request = orderRequest;
                orderRequest = (OrderRequest) requestJTable.getValueAt(selectedRow, 0);
                orderRequest.setStatus("Rejected by CDC");
                orderRequest.setOrderType("Delivery");
                Date date = new Date();
                orderRequest.setResolveDate(date);

            } else if (selectedRow > 1) {
                JOptionPane.showMessageDialog(null, "Please select only one row");
            } else {
                JOptionPane.showMessageDialog(null, "Please select a row");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Request already processed");
        }
    }//GEN-LAST:event_rejectButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton rejectButton;
    private javax.swing.JTable requestJTable;
    private javax.swing.JButton viewOrderButton;
    // End of variables declaration//GEN-END:variables
}
