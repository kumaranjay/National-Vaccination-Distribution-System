/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PHDAdmin;

import Business.CDCSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProviderEnterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Danisha
 */
public class RegisterProvidersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RegisterProvidersJPanel
     */
    private JPanel userProcessContainer;
    private CDCSystem system;
    private UserAccount account;
    private Enterprise enterprise;
    private String network;
    private Network rootNetwork;

    public RegisterProvidersJPanel(JPanel userProcessContainer, CDCSystem system, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        this.enterprise = enterprise;
        network = enterprise.getLocation();
        rootNetwork = system.getNetwork();
        populateProvider();
        populateRequests();
    }

    public void populateProvider() {
        DefaultTableModel dtm = (DefaultTableModel) registeredProvidersTable.getModel();
        dtm.setRowCount(0);

        for (Network stateNetwork : rootNetwork.getNetworkList()) {
            if (stateNetwork.getName().equals(network)) {
                for (Network subNetwork : stateNetwork.getNetworkList()) {
                    for (Enterprise enterprise : subNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise.getEnterpriseType().equals(Enterprise.EnterpriseType.Provider)) {
                            ProviderEnterprise provider = (ProviderEnterprise) enterprise;
                            if (provider.getStatus().equals("Active")) {
                                Object row[] = new Object[5];
                                row[0] = provider.getEnterpriseName();
                                row[1] = provider.getProviderType();
                                row[2] = provider.getContactName();
                                row[3] = provider.getContactNumber();
                                row[4] = provider.getEmailId();
                                dtm.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }

    public void populateRequests() {
        DefaultTableModel dtm = (DefaultTableModel) providerRequestTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestType().equals("Registration")) {
                Object row[] = new Object[4];
                row[0] = request;
                row[1] = request.getRequestDate();
                row[2] = request.getStatus();
                row[3] = request.getMessage();
                dtm.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        registeredProvidersTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        providerRequestTable = new javax.swing.JTable();
        approveButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        rejectButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        removeProviderButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        registeredProvidersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Provider Name", "Provider Type", "Admin Name", "Contact No", "Email Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(registeredProvidersTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 895, 160));

        providerRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Request Date", "Request Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(providerRequestTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, 752, 160));

        approveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        approveButton.setText("Approve Provider");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButtonActionPerformed(evt);
            }
        });
        add(approveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 520, -1, -1));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 540, 107, -1));

        rejectButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rejectButton.setText("Reject Provider");
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectButtonActionPerformed(evt);
            }
        });
        add(rejectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 520, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Provider Registration");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        jLabel1.setText("Providers to be Registered");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, -1, -1));

        jLabel2.setText("List of Providers");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, -1, -1));

        removeProviderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        removeProviderButton.setText("Remove Provider");
        removeProviderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProviderButtonActionPerformed(evt);
            }
        });
        add(removeProviderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(927, 240, 190, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = providerRequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest selectedRequest = (WorkRequest) providerRequestTable.getValueAt(selectedRow, 0);
            if (!(selectedRequest.getStatus().equals("Pending from PHD"))) {
                JOptionPane.showMessageDialog(null, "Order already processed");
                return;
            }
            selectedRequest.setStatus("Approved");
            String adminUserName = selectedRequest.getSender().getUsername();
            for (Network stateNetwork : rootNetwork.getNetworkList()) {
                if (stateNetwork.getName().equals(network)) {
                    for (Network subNetwork : stateNetwork.getNetworkList()) {
                        for (Enterprise enterprise1 : subNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                            if ((enterprise1.getEnterpriseType().equals(Enterprise.EnterpriseType.Provider))) {
                                for (UserAccount account : enterprise1.getUserAccountDirectory().getUserAccountList()) {
                                    if (account.getUsername().equals(adminUserName)) {
                                        ProviderEnterprise provider = (ProviderEnterprise) enterprise1;
                                        provider.setStatus("Active");
                                    }
                                }

                            }
                        }
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Request Approved");
            populateProvider();
            populateRequests();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_approveButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void rejectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = providerRequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest selectedRequest = (WorkRequest) providerRequestTable.getValueAt(selectedRow, 0);
            if (!(selectedRequest.getStatus().equals("Pending from PHD"))) {
                JOptionPane.showMessageDialog(null, "Order already processed");
                return;
            }
            selectedRequest.setStatus("Rejected");

            JTextField messageJTextField = new JTextField();

            Object[] addMessage = {"Message:", messageJTextField};
            int option = JOptionPane.showConfirmDialog(null, addMessage, "Message", JOptionPane.OK_CANCEL_OPTION, -1);

            if (option == JOptionPane.YES_OPTION) {
                if (messageJTextField.getText().equals(null)) {
                    JOptionPane.showMessageDialog(null, "Please provide a valid entry");
                    return;

                }

                String message = messageJTextField.getText();
                selectedRequest.setMessage(message);
                populateRequests();
                populateProvider();
            }
            JOptionPane.showMessageDialog(null, "Request Rejected");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }

    }//GEN-LAST:event_rejectButtonActionPerformed

    private void removeProviderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProviderButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = registeredProvidersTable.getSelectedRow();
        if (selectedRow >= 0) {
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete", "warning", JOptionPane.YES_NO_OPTION);
            boolean deleteFlag=false;
            Enterprise deleteEnterprise=null;
            Network subnet=null;
            if (option == JOptionPane.YES_OPTION) {

                String enterpriseName = String.valueOf(providerRequestTable.getValueAt(selectedRow, 0));
                A:for (Network stateNetwork : rootNetwork.getNetworkList()) {
                    if (stateNetwork.getName().equals(network)) {
                        for (Network subNetwork : stateNetwork.getNetworkList()) {
                            for (Enterprise enterprise : subNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                                if (enterprise.getEnterpriseType().equals(Enterprise.EnterpriseType.Provider)) {
                                    ProviderEnterprise provider = (ProviderEnterprise) enterprise;
                                    if (provider.getEnterpriseName().equals(enterpriseName)) {
                                        deleteFlag=true;
                                        subnet= subNetwork;
                                        deleteEnterprise=enterprise;
                                        break A;
                                        
                                    }
                                }
                            }
                        }
                    }
                }
                subnet.getEnterpriseDirectory().getEnterpriseList().remove(deleteEnterprise);
            }
        } else if (selectedRow > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        populateProvider();
    }//GEN-LAST:event_removeProviderButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable providerRequestTable;
    private javax.swing.JTable registeredProvidersTable;
    private javax.swing.JButton rejectButton;
    private javax.swing.JButton removeProviderButton;
    // End of variables declaration//GEN-END:variables
}
